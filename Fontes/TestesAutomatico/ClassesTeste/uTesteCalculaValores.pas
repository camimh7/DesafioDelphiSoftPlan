unit uTesteCalculaValores;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Data.DB, Datasnap.DBClient, SysUtils, uCalculaValores, System.Math;

type
  // Test methods for class TCalculaValores

  TestTCalculaValores = class(TTestCase)
  strict private
    FCalculaValores: TCalculaValores;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestePopularValoresFixos;
    procedure TesteObterTotalValores;
    procedure TesteObterTotalDivisoes;
    procedure TesteQuantidadeRegistros;
  end;

implementation

procedure TestTCalculaValores.SetUp;
begin
  FCalculaValores := TCalculaValores.Create;
end;

procedure TestTCalculaValores.TearDown;
begin
  FreeAndNil(FCalculaValores);
end;

procedure TestTCalculaValores.TestePopularValoresFixos;
var
  prValor: Currency;
  prNomeProjeto: string;
begin
  FCalculaValores.PopularValoresFixos('Projeto 01', 10);
  FCalculaValores.PopularValoresFixos('Projeto 02', 20);
  FCalculaValores.PopularValoresFixos('Projeto 03', 30);
  FCalculaValores.PopularValoresFixos('Projeto 04', 40);
  FCalculaValores.PopularValoresFixos('Projeto 05', 50);
  FCalculaValores.PopularValoresFixos('Projeto 06', 60);
  FCalculaValores.PopularValoresFixos('Projeto 07', 70);
  FCalculaValores.PopularValoresFixos('Projeto 08', 80);
  FCalculaValores.PopularValoresFixos('Projeto 09', 90);
  FCalculaValores.PopularValoresFixos('Projeto 10', 100);
end;

procedure TestTCalculaValores.TesteQuantidadeRegistros;
begin
  //Verifica se está populando 10 registros como o esperado
  FCalculaValores.PopulaValoresRandomicos;
  CheckTrue(FCalculaValores.DataSetValores.RecordCount = 10,'Quantidade de registros esperadas é 10, quantidade encontrada é de ' + IntToStr(FCalculaValores.DataSetValores.RecordCount));
end;

procedure TestTCalculaValores.TesteObterTotalValores;
begin
  //Verifica o cálculo de total
  TestePopularValoresFixos;
  CheckEquals(550,FCalculaValores.ObterTotalValores, 'Valor esperado: 550 e retornado:' + CurrToStr(FCalculaValores.ObterTotalValores));
end;

procedure TestTCalculaValores.TesteObterTotalDivisoes;
begin
  //Verifica o cálculo de divisões dos registros fixos
  TestePopularValoresFixos;
  CheckEquals(11.83,RoundTo(FCalculaValores.ObterTotalDivisoes,-2), 'Valor esperado: 11,83 e retornado:' + CurrToStr(FCalculaValores.ObterTotalDivisoes));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalculaValores.Suite);
end.

