unit uTesteQuery;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FireDAC.Comp.Client, uspQuery, FireDAC.Phys, Classes, FireDAC.Stan.Intf,
  FireDAC.DApt;

type
  // Test methods for class TspQuery

  TestTspQuery = class(TTestCase)
  strict private
    FspQuery: TspQuery;

  private
    FRetornoSQL : String;
    procedure PreencheColunas(prColuna : String);
    procedure PreencheTabelas(prTabelas : String);
    procedure PreencheCondicoes(prCondicoes : String);
    procedure ValidaRetorno(prEsperado : String);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TesteGeraSQLComVirgula;
    procedure TesteGeraSQLEmLinhas;
    procedure TesteGeraSQLComEspaço;
    procedure TesteGeraSQLDuasTabelas;
    procedure TesteGeraSQLComCondicoes;
    procedure TestLimpaVariaveisSQL;
  end;

implementation

uses
  SysUtils;

procedure TestTspQuery.PreencheColunas(prColuna: String);
begin
  FspQuery.Colunas.Add(prColuna);
end;

procedure TestTspQuery.PreencheCondicoes(prCondicoes: String);
begin
  FspQuery.Condicoes.Add(prCondicoes);
end;

procedure TestTspQuery.PreencheTabelas(prTabelas: String);
begin
  FspQuery.Tabelas.Add(prTabelas);
end;

procedure TestTspQuery.SetUp;
begin
  FspQuery := TspQuery.Create(nil);
end;

procedure TestTspQuery.TearDown;
begin
  FspQuery.Free;
  FspQuery := nil;
end;

procedure TestTspQuery.TesteGeraSQLComCondicoes;
begin
  PreencheColunas('CAMPO01,CAMPO02');
  PreencheTabelas('TABELA01');
  PreencheCondicoes('WHERE BDCAMPO1 = 10');
  PreencheCondicoes('AND BDCAMPO2 = 20');
  FspQuery.GeraSQL;
  ValidaRetorno('SELECT CAMPO01,CAMPO02 FROM TABELA01'+#13#10+'WHERE BDCAMPO1 = 10'+#13#10+'AND BDCAMPO2 = 20'+#13#10);
end;

procedure TestTspQuery.TesteGeraSQLComEspaço;
begin
  PreencheColunas('CAMPO01 CAMPO02');
  PreencheTabelas('TABELA01');
  FspQuery.GeraSQL;
  ValidaRetorno('SELECT CAMPO01,CAMPO02 FROM TABELA01');
end;

procedure TestTspQuery.TesteGeraSQLComVirgula;
begin
  PreencheColunas('CAMPO01,CAMPO02');
  PreencheTabelas('TABELA01');
  FspQuery.GeraSQL;
  ValidaRetorno('SELECT CAMPO01,CAMPO02 FROM TABELA01');
end;

procedure TestTspQuery.TesteGeraSQLDuasTabelas;
begin
  PreencheColunas('CAMPO01');
  PreencheColunas('CAMPO02');
  PreencheTabelas('TABELA01');
  PreencheTabelas('TABELA02');
  CheckException(FspQuery.GeraSQL,Exception);
end;

procedure TestTspQuery.TesteGeraSQLEmLinhas;
begin
  PreencheColunas('CAMPO01');
  PreencheColunas('CAMPO02');
  PreencheTabelas('TABELA01');
  FspQuery.GeraSQL;
  ValidaRetorno('SELECT CAMPO01,CAMPO02 FROM TABELA01');
end;

procedure TestTspQuery.TestLimpaVariaveisSQL;
begin
  FspQuery.LimpaVariaveisSQL;
  // TODO: Validate method results
end;

procedure TestTspQuery.ValidaRetorno(prEsperado : String);
begin
  CheckEqualsString(prEsperado, FspQuery.SQL.Text, 'Retorno esperado: ' + prEsperado + ' Retornou: ' + FspQuery.SQL.Text);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTspQuery.Suite);
end.

