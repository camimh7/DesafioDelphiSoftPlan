unit uTesteThreadContador;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, System.SysUtils, uThreadContador;

type
  // Test methods for class TThreadContador

  TestTThreadContador = class(TTestCase)
  strict private
    FThreadContador: TThreadContador;
  private
    FCont : Integer;
    procedure GuardaValorProgressao(prCont : Integer);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TesteExecuteThread;
  end;

implementation

procedure TestTThreadContador.GuardaValorProgressao(prCont: Integer);
begin
  FCont := prCont;
end;

procedure TestTThreadContador.SetUp;
begin
  FThreadContador := TThreadContador.Create;
  FThreadContador.FreeOnTerminate := False;
end;

procedure TestTThreadContador.TearDown;
begin
  if Assigned(FThreadContador) then
     FreeAndNil(FThreadContador);
end;

procedure TestTThreadContador.TesteExecuteThread;
begin
  {O intuito deste teste é colocar a thread pra rodar e garantir que não vai dar nenhum erro caso aconteca alguma alteração}
  FThreadContador.Tempo := 1;
  FThreadContador.OnProgressao := GuardaValorProgressao;
  FThreadContador.Start;
  FThreadContador.WaitFor;
  {Verificar se a thread está percorrendo até a 100}
  CheckTrue(100 = FCont,'Retorno esperado é de 100 mas o processo retornou ' + IntToStr(FCont));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTThreadContador.Suite);
end.

